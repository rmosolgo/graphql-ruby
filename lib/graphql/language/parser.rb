#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 356)

def initialize(query_string)
  @query_string = query_string
end

def parse_document
  @document ||= begin
    @tokens ||= GraphQL.scan(@query_string)
    if @tokens.none?
      make_node(:Document, definitions: [])
    else
      do_parse
    end
  end
end

def self.parse(query_string)
  self.new(query_string).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token.prev_token

    break if token.nil?
    break if token.name != :COMMENT
    break if prev_token.line != token.line + 1

    comments.unshift(token.to_s.sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$"
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   185,    10,    11,    12,    77,    80,   138,    76,   138,   217,
   138,   138,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    73,    10,    11,    12,
    80,    59,    80,    80,   115,    10,    11,    12,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,   141,    10,    11,    12,   138,    59,    31,   217,
    10,    11,    12,    62,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    53,    10,
    11,    12,   138,    59,   184,   128,    99,    69,    70,    72,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,   181,    84,    10,    11,    12,    59,
    80,   179,    90,    80,   180,    80,    80,   154,    37,    38,
    39,    40,    41,    42,    43,    44,    45,   152,   153,   171,
   172,   168,   169,   170,   178,   181,    80,    10,    11,    12,
    80,    99,   179,    80,    80,   180,    80,   112,   154,    37,
    38,    39,    40,    41,    42,    43,    44,    45,   152,   153,
   171,   172,   168,   169,   170,   178,   181,   117,    10,    11,
    12,    80,   121,   179,   122,   123,   180,   218,   124,   154,
    37,    38,    39,    40,    41,    42,    43,    44,    45,   152,
   153,   171,   172,   168,   169,   170,   178,   181,   125,    10,
    11,    12,   112,   112,   179,    77,   136,   180,   204,    77,
   154,    37,    38,    39,    40,    41,    42,    43,    44,    45,
   152,   153,   171,   172,   168,   169,   170,   178,   181,   145,
    10,    11,    12,   164,   165,   179,    80,   112,   180,   112,
   125,   154,    37,    38,    39,    40,    41,    42,    43,    44,
    45,   152,   153,   171,   172,   168,   169,   170,   178,    10,
    11,    12,   191,    80,   195,   112,   212,   215,   222,   nil,
    82,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,   207,    10,    11,    12,    80,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
   211,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,   190,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,   197,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,   220,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   111,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   102,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   111,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   111,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,     9,   nil,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,    24,
    25,   nil,    26,    27,    28,    29,    30,   nil,    13,    10,
    11,    12,   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   111,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   134,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   111,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   111,   nil,   nil,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,     9,   nil,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,    24,
    25,   nil,    26,    27,    28,    29,    30,   nil,    13,   194,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   154,    37,    38,    39,    40,    41,    42,    43,    44,
    45,   152,   153,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   154,    37,    38,    39,    40,    41,
    42,    43,    44,    45,   152,   153 ]

racc_action_check = [
   142,   142,   142,   142,    58,   224,   214,    58,   223,   214,
   114,   110,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,    52,    52,    52,    52,
   223,   142,   114,   110,    85,    85,    85,    85,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,   112,   112,   112,   112,   201,    52,     1,   201,
    62,    62,    62,    17,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,     9,     9,
     9,     9,   140,   112,   140,    97,    97,    30,    31,    33,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,   217,    60,   217,   217,   217,     9,
    63,   217,    64,    65,   217,    66,    67,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   222,    68,   222,   222,   222,
    71,    72,   222,    75,    78,   222,    81,    83,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   205,    87,   205,   205,
   205,    89,    91,   205,    92,    93,   205,   205,    94,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   180,    95,   180,
   180,   180,    96,   100,   180,   101,   105,   180,   180,   107,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   136,   118,
   136,   136,   136,   126,   130,   136,   133,   139,   136,   143,
   147,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,    59,
    59,    59,   151,   157,   160,   166,   188,   199,   210,   nil,
    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,    59,    59,    59,   181,   181,   181,   181,    59,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   187,   187,   187,   187,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   149,   149,   149,   149,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   162,   162,   162,   162,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   208,   208,
   208,   208,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,    90,    90,    90,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,   191,
   191,   191,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   195,   195,   195,   nil,   nil,   nil,
   nil,   nil,   195,   nil,   nil,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,    24,
    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
    24,    24,    24,    24,    76,    76,    76,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,   121,
   121,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   122,   122,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   124,
   124,   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   125,   125,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,    77,
    77,    77,   nil,    77,   nil,   nil,   nil,   nil,   nil,   nil,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    80,    80,    80,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    82,
    82,    82,   nil,   nil,   nil,   nil,   nil,    82,   nil,   nil,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,   145,   145,   145,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,    84,
    84,    84,   nil,   nil,   nil,   nil,   nil,    84,   nil,   nil,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,     3,   nil,     3,     3,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,
     3,   nil,     3,     3,     3,     3,     3,   nil,     3,   163,
   163,   163,   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   164,   164,   164,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   165,
   165,   165,   nil,   nil,   nil,   nil,   nil,   165,   nil,   nil,
   165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   179,   179,   179,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,    26,
    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    26,    26,    27,    27,    27,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    28,
    28,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    29,    29,    29,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,    29,    29,    29,    29,
    29,    29,    29,    29,    29,    29,    29,    29,    29,    99,
    99,    99,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    69,    69,    69,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    69,    69,    69,     8,
     8,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,   103,   103,   103,   nil,   103,   nil,
   nil,   nil,   nil,   nil,   nil,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,    13,
    13,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,   111,   111,   111,   nil,   nil,   nil,
   nil,   nil,   111,   nil,   nil,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   117,
   117,   117,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   120,   120,   120,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,    25,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,   212,   212,   212,   nil,   nil,   nil,
   nil,   nil,   212,   nil,   nil,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   215,
   215,   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,     0,   nil,     0,     0,     0,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     0,     0,
     0,   nil,     0,     0,     0,     0,     0,   nil,     0,   159,
   159,   159,   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   123,   123,   123,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123 ]

racc_action_pointer = [
  1262,    58,   nil,   762,   nil,   nil,   nil,   nil,  1035,    75,
   nil,   nil,   nil,  1085,   nil,   nil,   nil,    61,   nil,   nil,
   nil,   nil,   nil,   nil,   485,  1185,   885,   910,   935,   960,
    54,    88,   nil,    82,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,    -3,   255,
    90,   nil,    56,    77,    93,    80,    82,    83,   103,  1010,
   nil,   107,   132,   nil,   nil,   110,   510,   635,   111,   nil,
   660,   113,   685,   145,   735,    31,   nil,   157,   nil,   138,
   410,   170,   160,   173,   176,   191,   200,    77,   nil,   985,
   201,   198,   nil,  1060,   nil,   196,   nil,   202,   nil,   nil,
     0,  1110,    49,   nil,    -1,   nil,   nil,  1135,   227,   nil,
  1160,   535,   560,  1309,   585,   610,   218,   nil,   nil,   nil,
   224,   nil,   nil,   203,   nil,   nil,   226,   nil,   nil,   235,
    71,   nil,    -3,   237,   nil,   710,   nil,   233,   nil,   333,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   230,   nil,  1286,
   254,   nil,   359,   785,   810,   835,   263,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   860,
   195,   281,   nil,   nil,   nil,   nil,   nil,   307,   256,   nil,
   nil,   435,   nil,   nil,   nil,   460,   nil,   nil,   nil,   232,
   nil,    45,   nil,   nil,   nil,   164,   nil,   nil,   385,   nil,
   258,   nil,  1210,   nil,    -5,  1235,   nil,   102,   nil,   nil,
   nil,   nil,   133,    -3,   -28,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -137,  -137,    -1,    -2,    -3,    -5,    -6,    -7,   -14,  -137,
   -11,   -12,   -13,  -101,  -103,  -104,  -105,  -137,  -110,  -111,
  -112,  -113,  -114,  -115,  -137,  -137,  -137,  -137,  -137,  -137,
  -137,  -137,    -4,   -16,   -15,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,
   -52,   -53,  -137,   -10,   -30,   -32,   -33,   -34,   -64,   -92,
  -137,  -102,  -137,   -92,  -118,   -92,   -92,   -92,   -92,  -137,
   230,   -92,  -137,    -9,   -31,   -92,  -137,  -137,   -93,   -94,
  -137,   -92,  -137,  -137,  -137,  -137,  -107,  -137,  -116,   -92,
  -137,  -137,  -137,  -137,  -137,  -123,  -137,  -137,   -18,  -137,
   -28,   -64,   -65,  -137,   -67,  -137,   -95,   -64,   -97,   -21,
   -92,  -137,  -137,   -99,   -92,  -106,  -108,  -137,  -137,   -59,
  -119,  -137,  -137,  -137,  -137,  -137,  -137,    -8,   -17,   -19,
  -137,   -29,   -35,   -92,   -66,   -68,  -137,   -96,   -22,  -137,
  -137,   -26,  -137,  -137,  -109,  -137,   -60,  -123,  -126,  -137,
  -129,  -131,   -54,   -55,   -56,   -57,   -58,   -92,   -62,  -137,
  -137,  -121,  -137,  -137,  -137,  -137,   -28,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,  -137,
  -137,  -137,   -91,   -98,   -23,   -27,  -100,  -137,  -137,  -127,
  -128,  -137,   -61,   -63,  -132,  -137,  -122,  -133,  -124,  -134,
  -135,   -24,   -36,   -81,   -82,  -137,   -84,   -86,  -137,   -88,
  -137,  -117,  -137,  -130,   -24,  -137,   -20,  -137,   -83,   -85,
   -87,   -89,  -137,   -92,   -92,  -136,   -25,   -90,  -125,  -120 ]

racc_goto_table = [
     8,    52,    74,     8,   132,   110,   126,   114,    34,    58,
   167,   189,   158,    61,    75,   157,    98,   209,     4,   199,
   104,    32,   162,   163,    63,    64,    65,    66,    67,    68,
     2,    83,   156,    86,   140,    88,   149,    91,    92,    93,
    94,   129,   113,    96,   221,   156,   135,   100,   193,   189,
     3,   157,    58,   108,   206,   127,   116,   133,   188,    81,
   187,   118,    87,   137,    33,   216,   196,   196,   156,    95,
   202,    71,    97,   120,   159,   103,   101,   105,   224,   219,
   107,   205,   139,   208,   106,    87,   143,    60,   201,   156,
   119,   226,    74,    85,    89,   151,   227,     1,   183,   130,
   nil,   nil,   186,   105,   142,   166,   nil,   nil,   nil,   nil,
   nil,   nil,    58,   nil,   156,   nil,   nil,   144,   214,   nil,
   146,   147,   150,   155,   160,   160,   156,   nil,   nil,   192,
   nil,   156,   nil,   nil,   nil,   223,   155,   nil,   nil,   nil,
   nil,   nil,    58,   nil,   nil,   147,   nil,   nil,   nil,   147,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   155,
   nil,   nil,   160,   160,   200,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,
   155,   210,   nil,   nil,   nil,   nil,   nil,   147,   nil,   nil,
   nil,   213,   nil,   nil,   nil,   228,   229,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   155,   nil,   nil,   210,   nil,
   nil,   nil,   nil,   nil,   nil,   225,   nil,   155,   nil,   nil,
   nil,   nil,   155 ]

racc_goto_check = [
     8,    13,    21,     8,    20,    17,    60,    17,    14,    14,
    19,    61,    30,    26,    25,    28,    16,    41,     4,    63,
    33,     4,    59,    59,    14,    14,    14,    14,    14,    14,
     2,    11,    27,    49,    17,    11,    57,    11,    11,    11,
    11,    16,    12,    11,    41,    27,    33,    11,    30,    61,
     3,    28,    14,    11,    19,    12,    49,    25,    60,    26,
    57,    11,     8,    25,     9,    18,    58,    58,    27,    14,
    20,    10,    15,    29,    31,    32,    14,    14,    18,    19,
    14,    39,    11,    40,    43,     8,    11,    44,    17,    27,
    14,    19,    21,    48,    56,    62,    19,     1,    12,    14,
   nil,   nil,    12,    14,    13,    11,   nil,   nil,   nil,   nil,
   nil,   nil,    14,   nil,    27,   nil,   nil,    14,    17,   nil,
    14,    14,    14,     8,    14,    14,    27,   nil,   nil,    11,
   nil,    27,   nil,   nil,   nil,    17,     8,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,    14,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,
   nil,   nil,    14,    14,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
     8,    14,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,
   nil,    14,   nil,   nil,   nil,    11,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,    14,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,     8,   nil,   nil,
   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,    97,    30,    50,    18,   nil,   nil,   nil,     0,    56,
    38,   -28,   -41,    -8,     0,     0,   -56,   -77,  -136,  -126,
   -96,   -50,   nil,   nil,   nil,   -44,     0,   -91,  -108,   -17,
  -111,   -49,    -2,   -57,   nil,   nil,   nil,   nil,   nil,   -99,
   -98,  -164,   nil,     6,    74,   nil,   nil,   nil,    31,   -29,
   nil,   nil,   nil,   nil,   nil,   nil,    30,   -85,   -96,  -102,
   -89,  -138,   -27,  -145 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,    50,   nil,
   nil,   nil,   131,   nil,   109,   nil,   nil,   nil,   nil,   nil,
   nil,    54,    55,    56,    57,   nil,    35,    51,   182,   nil,
   nil,   nil,   nil,   nil,   173,   174,   175,   176,   177,   nil,
   nil,   nil,    78,    79,   nil,    14,    15,    16,   nil,   nil,
    18,    19,    20,    21,    22,    23,   nil,   nil,   161,   nil,
   nil,   148,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_none,
  1, 38, :_reduce_2,
  1, 39, :_reduce_3,
  2, 39, :_reduce_4,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  5, 41, :_reduce_8,
  3, 41, :_reduce_9,
  2, 41, :_reduce_10,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  0, 45, :_reduce_14,
  1, 45, :_reduce_none,
  0, 46, :_reduce_16,
  3, 46, :_reduce_17,
  1, 51, :_reduce_18,
  2, 51, :_reduce_19,
  5, 52, :_reduce_20,
  1, 53, :_reduce_21,
  2, 53, :_reduce_22,
  3, 53, :_reduce_23,
  0, 54, :_reduce_24,
  2, 54, :_reduce_25,
  2, 48, :_reduce_26,
  3, 48, :_reduce_27,
  0, 56, :_reduce_28,
  1, 56, :_reduce_29,
  1, 49, :_reduce_30,
  2, 49, :_reduce_31,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  4, 58, :_reduce_35,
  6, 58, :_reduce_36,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 65, :_reduce_59,
  2, 65, :_reduce_60,
  2, 66, :_reduce_61,
  1, 67, :_reduce_62,
  2, 67, :_reduce_63,
  0, 61, :_reduce_64,
  2, 61, :_reduce_65,
  3, 61, :_reduce_66,
  1, 68, :_reduce_67,
  2, 68, :_reduce_68,
  3, 69, :_reduce_69,
  1, 55, :_reduce_70,
  1, 55, :_reduce_71,
  1, 55, :_reduce_72,
  1, 55, :_reduce_73,
  1, 55, :_reduce_74,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 70, :_reduce_80,
  2, 71, :_reduce_81,
  2, 72, :_reduce_82,
  3, 72, :_reduce_83,
  1, 75, :_reduce_84,
  2, 75, :_reduce_85,
  2, 73, :_reduce_86,
  3, 73, :_reduce_87,
  1, 76, :_reduce_88,
  2, 76, :_reduce_89,
  3, 77, :_reduce_90,
  1, 74, :_reduce_91,
  0, 47, :_reduce_92,
  1, 47, :_reduce_none,
  1, 78, :_reduce_94,
  2, 78, :_reduce_95,
  3, 79, :_reduce_96,
  3, 59, :_reduce_97,
  5, 60, :_reduce_98,
  3, 60, :_reduce_99,
  6, 42, :_reduce_100,
  0, 80, :_reduce_101,
  1, 80, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  4, 81, :_reduce_106,
  1, 84, :_reduce_none,
  2, 84, :_reduce_108,
  3, 85, :_reduce_109,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  3, 86, :_reduce_116,
  7, 87, :_reduce_117,
  0, 92, :_reduce_118,
  2, 92, :_reduce_119,
  5, 94, :_reduce_120,
  1, 95, :_reduce_121,
  2, 95, :_reduce_122,
  0, 96, :_reduce_123,
  3, 96, :_reduce_124,
  5, 97, :_reduce_125,
  1, 93, :_reduce_126,
  2, 93, :_reduce_127,
  6, 88, :_reduce_128,
  1, 98, :_reduce_129,
  3, 98, :_reduce_130,
  5, 89, :_reduce_131,
  6, 90, :_reduce_132,
  6, 91, :_reduce_133,
  6, 83, :_reduce_134,
  1, 99, :_reduce_135,
  3, 99, :_reduce_136 ]

racc_reduce_n = 137

racc_shift_n = 230

racc_token_table = {
  false => 0,
  :error => 1,
  :LCURLY => 2,
  :RCURLY => 3,
  :QUERY => 4,
  :MUTATION => 5,
  :SUBSCRIPTION => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :VAR_SIGN => 9,
  :COLON => 10,
  :BANG => 11,
  :LBRACKET => 12,
  :RBRACKET => 13,
  :EQUALS => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :TRUE => 27,
  :FALSE => 28,
  :FLOAT => 29,
  :INT => 30,
  :STRING => 31,
  :NULL => 32,
  :DIR_SIGN => 33,
  :ELLIPSIS => 34,
  :PIPE => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LCURLY",
  "RCURLY",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "NULL",
  "DIR_SIGN",
  "ELLIPSIS",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "operation_definition",
  "fragment_definition",
  "type_system_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "selection_list",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "input_value",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "name_list",
  "enum_value_definition",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "null_value",
  "variable",
  "list_value",
  "object_value",
  "enum_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "implements_opt",
  "field_definition_list",
  "input_value_definition",
  "input_value_definition_list",
  "arguments_definitions_opt",
  "field_definition",
  "union_members",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_8(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_9(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[1],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_10(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: [],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_14(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_17(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_18(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_19(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_20(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_21(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_22(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_23(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_25(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_27(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_29(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_30(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_31(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_35(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_36(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_59(val, _values, result)
     return [make_node(:TypeName, name: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_60(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_61(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[0], directives: val[1], description: get_description(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_62(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_63(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_64(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_65(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_66(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_67(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_68(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_69(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_70(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_71(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_72(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_73(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_74(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_80(val, _values, result)
     return make_node(:NullValue, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_81(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_82(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_83(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_84(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_85(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_86(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_87(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_88(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_89(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_90(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_91(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_92(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_94(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_95(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_96(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_97(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_98(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_99(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 247)
  def _reduce_100(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_101(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_106(val, _values, result)
     return make_node(:SchemaDefinition, position_source: val[0], description: get_description(val[0]), **val[2]) 
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_108(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_109(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_116(val, _values, result)
     return make_node(:ScalarTypeDefinition, name: val[1], directives: val[2], description: get_description(val[0]), position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_117(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[1], interfaces: val[2], directives: val[3], fields: val[5], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 292)
  def _reduce_118(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_119(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_120(val, _values, result)
            return make_node(:InputValueDefinition, name: val[0], type: val[2], default_value: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_121(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_122(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_123(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 306)
  def _reduce_124(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_125(val, _values, result)
            return make_node(:FieldDefinition, name: val[0], arguments: val[1], type: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_126(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_127(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_128(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_129(val, _values, result)
     return [make_node(:TypeName, name: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_130(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_131(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[1], directives: val[2], types: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_132(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[1], directives: val[2], values: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_133(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_134(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[2], arguments: val[3], locations: val[5], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_135(val, _values, result)
     return [val[0].to_s] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_136(val, _values, result)
     val[0] << val[2].to_s 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
