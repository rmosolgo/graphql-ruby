module GraphQL
  module Language
    module Lexer
      def self.tokenize(query_string)
        run_lexer(query_string)
      end

      # Replace any escaped unicode or whitespace with the _actual_ characters
      # To avoid allocating more strings, this modifies the string passed into it
      def self.replace_escaped_characters_in_place(raw_string)
        raw_string.gsub!(ESCAPES, ESCAPES_REPLACE)
        raw_string.gsub!(UTF_8, &UTF_8_REPLACE)
        nil
      end

      private

      class << self
        attr_accessor :_graphql_lexer_trans_keys
        private :_graphql_lexer_trans_keys, :_graphql_lexer_trans_keys=
      end
      self._graphql_lexer_trans_keys = [
        4, 21, 4, 21, 4, 4, 4, 4, 4, 4, 13, 14, 13, 14, 10, 14, 12, 12, 0, 47, 0, 0, 4, 21, 4, 21, 4, 4, 4, 4, 1, 1, 13, 14, 10, 27, 13, 14, 10, 27, 10, 27, 12, 12, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 13, 44, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_char_class
        private :_graphql_lexer_char_class, :_graphql_lexer_char_class=
      end
      self._graphql_lexer_char_class = [
        0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 4, 5, 6, 2, 7, 2, 8, 9, 2, 10, 0, 11, 12, 2, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 2, 2, 16, 2, 2, 17, 18, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20, 21, 22, 2, 18, 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 18, 18, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 18, 43, 44, 18, 45, 46, 47, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_index_offsets
        private :_graphql_lexer_index_offsets, :_graphql_lexer_index_offsets=
      end
      self._graphql_lexer_index_offsets = [
        0, 18, 36, 37, 38, 39, 41, 43, 48, 49, 97, 98, 116, 134, 135, 136, 137, 139, 157, 159, 177, 195, 196, 228, 260, 292, 324, 356, 388, 420, 452, 484, 516, 548, 580, 612, 644, 676, 708, 740, 772, 804, 836, 868, 900, 932, 964, 996, 1028, 1060, 1092, 1124, 1156, 1188, 1220, 1252, 1284, 1316, 1348, 1380, 1412, 1444, 1476, 1508, 1540, 1572, 1604, 1636, 1668, 1700, 1732, 1764, 1796, 1828, 1860, 1892, 1924, 1956, 1988, 2020, 2052, 2084, 2116, 2148, 2180, 2212, 2244, 2276, 2308, 2340, 2372, 2404, 2436, 2468, 2500, 2532, 2564, 2596, 2628, 2660, 2692, 2724, 2756, 2788, 2820, 2852, 2884, 2916, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_indicies
        private :_graphql_lexer_indicies, :_graphql_lexer_indicies=
      end
      self._graphql_lexer_indicies = [
        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6, 7, 8, 9, 9, 11, 11, 12, 12, 0, 9, 9, 14, 16, 17, 15, 18, 19, 20, 21, 22, 23, 24, 15, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 15, 34, 32, 32, 32, 35, 36, 37, 32, 32, 38, 32, 39, 40, 41, 32, 42, 32, 43, 44, 45, 32, 32, 32, 46, 47, 48, 16, 51, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 8, 54, 27, 28, 12, 12, 56, 9, 9, 55, 55, 55, 55, 57, 55, 55, 55, 55, 55, 55, 55, 57, 9, 9, 12, 12, 58, 11, 11, 58, 58, 58, 58, 57, 58, 58, 58, 58, 58, 58, 58, 57, 12, 12, 56, 28, 28, 55, 55, 55, 55, 57, 55, 55, 55, 55, 55, 55, 55, 57, 59, 32, 32, 0, 0, 0, 32, 32, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 62, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 63, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 64, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 66, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 68, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 32, 32, 32, 32, 32, 32, 32, 32, 70, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 73, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 74, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 75, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 76, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 78, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 79, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 80, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 81, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 82, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 85, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 86, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 87, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 88, 89, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 90, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 91, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 92, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 32, 32, 32, 99, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 104, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 105, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 106, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 110, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 113, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 121, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 123, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 124, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 125, 32, 32, 32, 32, 32, 32, 126, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 127, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 128, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 129, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 131, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 132, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 133, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 134, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 135, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 136, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 137, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 138, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 139, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 140, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 141, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 142, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 143, 32, 32, 32, 32, 32, 144, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 145, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 146, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 147, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 148, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 149, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 150, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 151, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 60, 60, 32, 32, 60, 60, 60, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 152, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_index_defaults
        private :_graphql_lexer_index_defaults, :_graphql_lexer_index_defaults=
      end
      self._graphql_lexer_index_defaults = [
        1, 1, 5, 5, 5, 0, 10, 0, 13, 15, 49, 1, 1, 52, 5, 20, 50, 55, 58, 58, 55, 50, 0, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_trans_cond_spaces
        private :_graphql_lexer_trans_cond_spaces, :_graphql_lexer_trans_cond_spaces=
      end
      self._graphql_lexer_trans_cond_spaces = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_cond_targs
        private :_graphql_lexer_cond_targs, :_graphql_lexer_cond_targs=
      end
      self._graphql_lexer_cond_targs = [
        9, 0, 9, 1, 12, 2, 3, 4, 14, 18, 9, 19, 5, 9, 9, 9, 10, 9, 9, 11, 15, 9, 9, 9, 9, 16, 21, 17, 20, 9, 9, 9, 22, 9, 9, 23, 31, 38, 48, 66, 73, 76, 77, 81, 99, 104, 9, 9, 9, 9, 9, 13, 9, 9, 9, 9, 6, 7, 9, 8, 9, 24, 25, 26, 27, 28, 29, 30, 22, 32, 34, 33, 22, 35, 36, 37, 22, 39, 42, 40, 41, 22, 43, 44, 45, 46, 47, 22, 49, 57, 50, 51, 52, 53, 54, 55, 56, 22, 58, 60, 59, 22, 61, 62, 63, 64, 65, 22, 67, 68, 69, 70, 71, 72, 22, 74, 75, 22, 22, 78, 79, 80, 22, 82, 89, 83, 86, 84, 85, 22, 87, 88, 22, 90, 91, 92, 93, 94, 95, 96, 97, 98, 22, 100, 102, 101, 22, 103, 22, 105, 106, 107, 22, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_cond_actions
        private :_graphql_lexer_cond_actions, :_graphql_lexer_cond_actions=
      end
      self._graphql_lexer_cond_actions = [
        1, 0, 2, 0, 3, 0, 0, 0, 4, 0, 5, 6, 0, 7, 8, 11, 0, 12, 13, 14, 0, 15, 16, 17, 18, 0, 19, 20, 20, 21, 22, 23, 24, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 31, 3, 32, 33, 34, 35, 0, 0, 36, 0, 37, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 46, 0, 0, 47, 48, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 53, 0, 54, 0, 0, 0, 55, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_to_state_actions
        private :_graphql_lexer_to_state_actions, :_graphql_lexer_to_state_actions=
      end
      self._graphql_lexer_to_state_actions = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_from_state_actions
        private :_graphql_lexer_from_state_actions, :_graphql_lexer_from_state_actions=
      end
      self._graphql_lexer_from_state_actions = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_eof_trans
        private :_graphql_lexer_eof_trans, :_graphql_lexer_eof_trans=
      end
      self._graphql_lexer_eof_trans = [
        1, 1, 1, 1, 1, 1, 11, 1, 14, 0, 50, 51, 53, 53, 54, 55, 51, 56, 59, 59, 56, 51, 1, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_nfa_targs
        private :_graphql_lexer_nfa_targs, :_graphql_lexer_nfa_targs=
      end
      self._graphql_lexer_nfa_targs = [
        0, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_nfa_offsets
        private :_graphql_lexer_nfa_offsets, :_graphql_lexer_nfa_offsets=
      end
      self._graphql_lexer_nfa_offsets = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_nfa_push_actions
        private :_graphql_lexer_nfa_push_actions, :_graphql_lexer_nfa_push_actions=
      end
      self._graphql_lexer_nfa_push_actions = [
        0, 0,
      ]

      class << self
        attr_accessor :_graphql_lexer_nfa_pop_trans
        private :_graphql_lexer_nfa_pop_trans, :_graphql_lexer_nfa_pop_trans=
      end
      self._graphql_lexer_nfa_pop_trans = [
        0, 0,
      ]

      class << self
        attr_accessor :graphql_lexer_start
      end
      self.graphql_lexer_start = 9

      class << self
        attr_accessor :graphql_lexer_first_final
      end
      self.graphql_lexer_first_final = 9

      class << self
        attr_accessor :graphql_lexer_error
      end
      self.graphql_lexer_error = -1

      class << self
        attr_accessor :graphql_lexer_en_main
      end
      self.graphql_lexer_en_main = 9

      def self.run_lexer(query_string)
        data = query_string.unpack("c*")
        eof = data.length

        # Since `Lexer` is a module, store all lexer state
        # in this local variable:
        meta = {
          line: 1,
          col: 1,
          data: data,
          tokens: [],
          previous_token: nil,
        }

        p ||= 0
        pe ||= data.length

        begin
          cs = graphql_lexer_start
          ts = 0
          te = 0
          act = 0
        end
        begin
          _trans = 0
          _have = 0
          _cont = 1
          _keys = 0
          _inds = 0
          while (_cont == 1)
            begin
              _have = 0
              if (p == pe)
                begin
                  if (p == eof)
                    begin
                      if (_graphql_lexer_eof_trans[cs] > 0)
                        begin
                          _trans = _graphql_lexer_eof_trans[cs] - 1
                          _have = 1
                        end
                      end
                      if (_have == 0)
                        begin
                        end
                      end
                    end
                  end
                  if (_have == 0)
                    _cont = 0
                  end
                end
              end
              if (_cont == 1)
                begin
                  if (_have == 0)
                    begin
                      case _graphql_lexer_from_state_actions[cs]
                      when -2
                        begin
                        end
                      when 10
                        begin
                          begin
                            begin
                              ts = p
                            end
                          end
                        end
                      end
                      _keys = (cs << 1)
                      _inds = _graphql_lexer_index_offsets[cs]
                      if ((data[p].ord) <= 125 && (data[p].ord) >= 9)
                        begin
                          _ic = _graphql_lexer_char_class[(data[p].ord) - 9]
                          if (_ic <= _graphql_lexer_trans_keys[_keys + 1] && _ic >= _graphql_lexer_trans_keys[_keys])
                            _trans = _graphql_lexer_indicies[_inds + (_ic - _graphql_lexer_trans_keys[_keys])]
                          else
                            _trans = _graphql_lexer_index_defaults[cs]
                          end
                        end
                      else
                        begin
                          _trans = _graphql_lexer_index_defaults[cs]
                        end
                      end
                    end
                  end
                  if (_cont == 1)
                    begin
                      cs = _graphql_lexer_cond_targs[_trans]
                      case _graphql_lexer_cond_actions[_trans]
                      when -2
                        begin
                        end
                      when 19
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                        end
                      when 29
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:RCURLY, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 27
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:LCURLY, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 18
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:RPAREN, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 17
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:LPAREN, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 26
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:RBRACKET, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 25
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:LBRACKET, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 21
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:COLON, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 2
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit_string(ts, te, meta, block: false)
                              end
                            end
                          end
                        end
                      when 15
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:VAR_SIGN, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 23
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:DIR_SIGN, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 8
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:ELLIPSIS, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 22
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:EQUALS, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 13
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:BANG, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 28
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:PIPE, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 16
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:AMP, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 12
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                meta[:line] += 1
                                meta[:col] = 1
                              end
                            end
                          end
                        end
                      when 11
                        begin
                          begin
                            begin
                              te = p + 1
                              begin
                                emit(:UNKNOWN_CHAR, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 35
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                emit(:INT, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 36
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                emit(:FLOAT, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 32
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                emit_string(ts, te, meta, block: false)
                              end
                            end
                          end
                        end
                      when 33
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                emit_string(ts, te, meta, block: true)
                              end
                            end
                          end
                        end
                      when 37
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                emit(:IDENTIFIER, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 34
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                record_comment(ts, te, meta)
                              end
                            end
                          end
                        end
                      when 30
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                meta[:col] += te - ts
                              end
                            end
                          end
                        end
                      when 31
                        begin
                          begin
                            begin
                              te = p
                              p = p - 1
                              begin
                                emit(:UNKNOWN_CHAR, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 5
                        begin
                          begin
                            begin
                              p = ((te)) - 1
                              begin
                                emit(:INT, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 7
                        begin
                          begin
                            begin
                              p = ((te)) - 1
                              begin
                                emit(:UNKNOWN_CHAR, ts, te, meta)
                              end
                            end
                          end
                        end
                      when 1
                        begin
                          begin
                            begin
                              case act
                              when -2
                                begin
                                end
                              when 1
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:INT, ts, te, meta)
                                  end
                                end
                              when 2
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:FLOAT, ts, te, meta)
                                  end
                                end
                              when 3
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:ON, ts, te, meta)
                                  end
                                end
                              when 4
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:FRAGMENT, ts, te, meta)
                                  end
                                end
                              when 5
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:TRUE, ts, te, meta)
                                  end
                                end
                              when 6
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:FALSE, ts, te, meta)
                                  end
                                end
                              when 7
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:NULL, ts, te, meta)
                                  end
                                end
                              when 8
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:QUERY, ts, te, meta)
                                  end
                                end
                              when 9
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:MUTATION, ts, te, meta)
                                  end
                                end
                              when 10
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:SUBSCRIPTION, ts, te, meta)
                                  end
                                end
                              when 11
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:SCHEMA, ts, te, meta)
                                  end
                                end
                              when 12
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:SCALAR, ts, te, meta)
                                  end
                                end
                              when 13
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:TYPE, ts, te, meta)
                                  end
                                end
                              when 14
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:EXTEND, ts, te, meta)
                                  end
                                end
                              when 15
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:IMPLEMENTS, ts, te, meta)
                                  end
                                end
                              when 16
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:INTERFACE, ts, te, meta)
                                  end
                                end
                              when 17
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:UNION, ts, te, meta)
                                  end
                                end
                              when 18
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:ENUM, ts, te, meta)
                                  end
                                end
                              when 19
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:INPUT, ts, te, meta)
                                  end
                                end
                              when 20
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:DIRECTIVE, ts, te, meta)
                                  end
                                end
                              when 28
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit_string(ts, te, meta, block: false)
                                  end
                                end
                              when 29
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit_string(ts, te, meta, block: true)
                                  end
                                end
                              when 37
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:IDENTIFIER, ts, te, meta)
                                  end
                                end
                              when 41
                                begin
                                  p = ((te)) - 1
                                  begin
                                    emit(:UNKNOWN_CHAR, ts, te, meta)
                                  end
                                end
                              end
                            end
                          end
                        end
                      when 20
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 1
                            end
                          end
                        end
                      when 6
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 2
                            end
                          end
                        end
                      when 48
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 3
                            end
                          end
                        end
                      when 42
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 4
                            end
                          end
                        end
                      when 53
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 5
                            end
                          end
                        end
                      when 41
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 6
                            end
                          end
                        end
                      when 47
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 7
                            end
                          end
                        end
                      when 49
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 8
                            end
                          end
                        end
                      when 46
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 9
                            end
                          end
                        end
                      when 52
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 10
                            end
                          end
                        end
                      when 51
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 11
                            end
                          end
                        end
                      when 50
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 12
                            end
                          end
                        end
                      when 54
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 13
                            end
                          end
                        end
                      when 40
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 14
                            end
                          end
                        end
                      when 43
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 15
                            end
                          end
                        end
                      when 45
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 16
                            end
                          end
                        end
                      when 55
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 17
                            end
                          end
                        end
                      when 39
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 18
                            end
                          end
                        end
                      when 44
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 19
                            end
                          end
                        end
                      when 38
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 20
                            end
                          end
                        end
                      when 3
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 28
                            end
                          end
                        end
                      when 4
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 29
                            end
                          end
                        end
                      when 24
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 37
                            end
                          end
                        end
                      when 14
                        begin
                          begin
                            begin
                              te = p + 1
                            end
                          end
                          begin
                            begin
                              act = 41
                            end
                          end
                        end
                      end
                      case _graphql_lexer_to_state_actions[cs]
                      when -2
                        begin
                        end
                      when 9
                        begin
                          begin
                            begin
                              ts = 0
                            end
                          end
                        end
                      end
                      if (_cont == 1)
                        p += 1
                      end
                    end
                  end
                end
              end
            end
          end
        end
        meta[:tokens]
      end

      def self.record_comment(ts, te, meta)
        token = GraphQL::Language::Token.new(
          name: :COMMENT,
          value: meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
          line: meta[:line],
          col: meta[:col],
          prev_token: meta[:previous_token],
        )

        meta[:previous_token] = token

        meta[:col] += te - ts
      end

      def self.emit(token_name, ts, te, meta)
        meta[:tokens] << token = GraphQL::Language::Token.new(
          name: token_name,
          value: meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
          line: meta[:line],
          col: meta[:col],
          prev_token: meta[:previous_token],
        )
        meta[:previous_token] = token
        # Bump the column counter for the next token
        meta[:col] += te - ts
      end

      ESCAPES = /\\["\\\/bfnrt]/
      ESCAPES_REPLACE = {
        '\\"' => '"',
        "\\\\" => "\\",
        "\\/" => "/",
        "\\b" => "\b",
        "\\f" => "\f",
        "\\n" => "\n",
        "\\r" => "\r",
        "\\t" => "\t",
      }

      UTF_8 = /\\u[\dAa-f]{4}/i
      UTF_8_REPLACE = -> (m) { [m[-4..-1].to_i(16)].pack("U".freeze) }

      VALID_STRING = /\A(?:[^\\]|#{ESCAPES}|#{UTF_8})*\z/o

      PACK_DIRECTIVE = "c*"
      UTF_8_ENCODING = "UTF-8"

      def self.emit_string(ts, te, meta, block:)
        quotes_length = block ? 3 : 1
        ts += quotes_length
        value = meta[:data][ts...te - quotes_length].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING)
        if block
          value = GraphQL::Language::BlockString.trim_whitespace(value)
        end
        if value !~ VALID_STRING
          meta[:tokens] << token = GraphQL::Language::Token.new(
            name: :BAD_UNICODE_ESCAPE,
            value: value,
            line: meta[:line],
            col: meta[:col],
            prev_token: meta[:previous_token],
          )
        else
          replace_escaped_characters_in_place(value)

          meta[:tokens] << token = GraphQL::Language::Token.new(
            name: :STRING,
            value: value,
            line: meta[:line],
            col: meta[:col],
            prev_token: meta[:previous_token],
          )
        end

        meta[:previous_token] = token
        meta[:col] += te - ts
      end
    end
  end
end
